/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 22 10:17:07 GMT 2017
 */

package github;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import github.WebhooksReceiver;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import javax.servlet.ServletContextEvent;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebhooksReceiver_ESTest extends WebhooksReceiver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      webhooksReceiver0.mainExec("");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedReader) null).when(httpServletRequest0).getReader();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        webhooksReceiver0.doPost(httpServletRequest0, httpServletResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("github.WebhooksReceiver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, 97);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(bufferedReader0).when(httpServletRequest0).getReader();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        webhooksReceiver0.doPost(httpServletRequest0, httpServletResponse0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      ServletContextEvent servletContextEvent0 = mock(ServletContextEvent.class, new ViolatedAssumptionAnswer());
      webhooksReceiver0.contextInitialized(servletContextEvent0);
      ServletContextEvent servletContextEvent1 = mock(ServletContextEvent.class, new ViolatedAssumptionAnswer());
      webhooksReceiver0.contextInitialized(servletContextEvent1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 757);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberReader0, lineNumberReader0).when(httpServletRequest0).getReader();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      webhooksReceiver0.doPost(httpServletRequest0, httpServletResponse0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      // Undeclared exception!
      try { 
        webhooksReceiver0.mainExec((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      ServletContextEvent servletContextEvent0 = mock(ServletContextEvent.class, new ViolatedAssumptionAnswer());
      webhooksReceiver0.contextDestroyed(servletContextEvent0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WebhooksReceiver webhooksReceiver0 = new WebhooksReceiver();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      webhooksReceiver0.doGet(httpServletRequest0, httpServletResponse0);
  }
}
